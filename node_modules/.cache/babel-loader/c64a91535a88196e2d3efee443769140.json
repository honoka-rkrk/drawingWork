{"ast":null,"code":"import React,{useContext}from'react';import{useHistory}from'react-router';import firebase from'firebase/app';import{FirebaseContext,UserContext}from'../../Context/contexts';import CompLoginDialog from'../Component/loginDialog';import{jsx as _jsx}from\"react/jsx-runtime\";var LoginDialog=function LoginDialog(props){var open=props.open,onClose=props.onClose;var _useContext=useContext(FirebaseContext),auth=_useContext.auth;var _useContext2=useContext(UserContext),setCredential=_useContext2.setCredential;var history=useHistory();//react-firebaseuiのパッケージを使用、signInOptionsでプロバイダを増やせばそれに対応してログインボタンも増える。\nvar uiConfig={signInFlow:'redirect',signInOptions:[{provider:firebase.auth.TwitterAuthProvider.PROVIDER_ID,customParameters:{lang:'ja'}}],callbacks:{signInFailure:function signInFailure(error){console.log(error);},// ログインが成功した時に呼ばれるコールバック関数。authResultにCredential情報を、\n//redirectUrlにsignInSuccessUrlというURLﾊﾟﾗﾒｰﾀで設定されていたパスを渡されるようになっている。\nsignInSuccessWithAuthResult:function signInSuccessWithAuthResult(authResult,redirectUrl){//twitterのスクリーンネームやプロフィール文が格納されたCredentialはここでしか取得できないので\n//過ぎにContextに格納する\nsetCredential(authResult);//trueで返すとredirectUrlにリダイレクトされ、アプリがリロードされるので、その前にreact-routerでアプリ内\n//リダイレクトを設定してfalseを返している。\nvar dest=redirectUrl||'/home';history.replace(dest);return false;}}};return/*#__PURE__*/_jsx(CompLoginDialog,{uiConfig:uiConfig,auth:auth,open:open,onClose:onClose});};export default LoginDialog;","map":{"version":3,"sources":["/Users/rakuraku2563/Desktop/drawingWork/src/Home/Container/loginDialog.tsx"],"names":["React","useContext","useHistory","firebase","FirebaseContext","UserContext","CompLoginDialog","LoginDialog","props","open","onClose","auth","setCredential","history","uiConfig","signInFlow","signInOptions","provider","TwitterAuthProvider","PROVIDER_ID","customParameters","lang","callbacks","signInFailure","error","console","log","signInSuccessWithAuthResult","authResult","redirectUrl","dest","replace"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,OAASC,UAAT,KAA2B,cAA3B,CACA,MAAOC,CAAAA,QAAP,KAAqB,cAArB,CACA,OAASC,eAAT,CAA0BC,WAA1B,KAA6C,wBAA7C,CACA,MAAOC,CAAAA,eAAP,KAA4B,0BAA5B,C,2CAOA,GAAMC,CAAAA,WAAiC,CAAG,QAApCA,CAAAA,WAAoC,CAACC,KAAD,CAAuB,CAC/D,GAAQC,CAAAA,IAAR,CAA0BD,KAA1B,CAAQC,IAAR,CAAcC,OAAd,CAA0BF,KAA1B,CAAcE,OAAd,CACA,gBAAiBT,UAAU,CAACG,eAAD,CAA3B,CAAQO,IAAR,aAAQA,IAAR,CACA,iBAA0BV,UAAU,CAACI,WAAD,CAApC,CAAQO,aAAR,cAAQA,aAAR,CACA,GAAMC,CAAAA,OAAO,CAAGX,UAAU,EAA1B,CAEA;AACA,GAAMY,CAAAA,QAAgC,CAAG,CACvCC,UAAU,CAAE,UAD2B,CAEvCC,aAAa,CAAE,CACb,CACEC,QAAQ,CAAEd,QAAQ,CAACQ,IAAT,CAAcO,mBAAd,CAAkCC,WAD9C,CAEEC,gBAAgB,CAAE,CAAEC,IAAI,CAAE,IAAR,CAFpB,CADa,CAFwB,CAQvCC,SAAS,CAAE,CACTC,aAAa,CAAE,uBAACC,KAAD,CAAW,CACxBC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACD,CAHQ,CAIT;AACA;AACAG,2BAA2B,CAAE,qCAACC,UAAD,CAAaC,WAAb,CAA6B,CACxD;AACA;AACAjB,aAAa,CAACgB,UAAD,CAAb,CACA;AACA;AACA,GAAME,CAAAA,IAAI,CAAGD,WAAW,EAAI,OAA5B,CACAhB,OAAO,CAACkB,OAAR,CAAgBD,IAAhB,EACA,MAAO,MAAP,CACD,CAfQ,CAR4B,CAAzC,CA0BA,mBACE,KAAC,eAAD,EAAiB,QAAQ,CAAEhB,QAA3B,CAAqC,IAAI,CAAEH,IAA3C,CAAiD,IAAI,CAAEF,IAAvD,CAA6D,OAAO,CAAEC,OAAtE,EADF,CAGD,CApCD,CAsCA,cAAeH,CAAAA,WAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { useHistory } from 'react-router';\nimport firebase from 'firebase/app';\nimport { FirebaseContext, UserContext } from '../../Context/contexts';\nimport CompLoginDialog from '../Component/loginDialog';\n\ntype LoginProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nconst LoginDialog: React.FC<LoginProps> = (props: LoginProps) => {\n  const { open, onClose } = props;\n  const { auth } = useContext(FirebaseContext);\n  const { setCredential } = useContext(UserContext);\n  const history = useHistory();\n\n  //react-firebaseuiのパッケージを使用、signInOptionsでプロバイダを増やせばそれに対応してログインボタンも増える。\n  const uiConfig: firebaseui.auth.Config = {\n    signInFlow: 'redirect',\n    signInOptions: [\n      {\n        provider: firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n        customParameters: { lang: 'ja' }\n      }\n    ],\n    callbacks: {\n      signInFailure: (error) => {\n        console.log(error);\n      },\n      // ログインが成功した時に呼ばれるコールバック関数。authResultにCredential情報を、\n      //redirectUrlにsignInSuccessUrlというURLﾊﾟﾗﾒｰﾀで設定されていたパスを渡されるようになっている。\n      signInSuccessWithAuthResult: (authResult, redirectUrl) => {\n        //twitterのスクリーンネームやプロフィール文が格納されたCredentialはここでしか取得できないので\n        //過ぎにContextに格納する\n        setCredential(authResult as firebase.auth.UserCredential);\n        //trueで返すとredirectUrlにリダイレクトされ、アプリがリロードされるので、その前にreact-routerでアプリ内\n        //リダイレクトを設定してfalseを返している。\n        const dest = redirectUrl || '/home';\n        history.replace(dest);\n        return false;\n      }\n    }\n  };\n  return (\n    <CompLoginDialog uiConfig={uiConfig} auth={auth} open={open} onClose={onClose} />\n  );\n};\n\nexport default LoginDialog;\n"]},"metadata":{},"sourceType":"module"}