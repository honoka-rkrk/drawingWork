{"ast":null,"code":"var _jsxFileName = \"/Users/rakuraku2563/Desktop/drawingWork/src/Chat/Container/Display/display.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { db } from '../../../firebase';\nimport CompDisplay from '../../Component/Display/display';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Display = () => {\n  _s();\n\n  const [messages, setMessages] = useState(null);\n  useEffect(() => {\n    let id;\n    let unmounted = false;\n\n    const getMessage = async () => {\n      const messagesRef = db.collection('messages');\n      await messagesRef.orderBy('createdAt', 'desc').limit(15).get().then(snapshot => {\n        const newMessages = [];\n        snapshot.forEach(doc => {\n          newMessages.push({ ...doc.data()\n          });\n        });\n        if (!unmounted) setMessages(newMessages.reverse());\n      });\n    };\n\n    const timer = () => {\n      getMessage();\n      return window.setTimeout(() => {\n        id = timer();\n      }, 1000);\n    };\n\n    id = timer();\n    return () => {\n      unmounted = true;\n      clearTimeout(id);\n    };\n  }, [setMessages]);\n  return /*#__PURE__*/_jsxDEV(CompDisplay, {\n    messages: messages\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Display, \"w/jO2s54SlYWlYMKGDfZRvIpaDU=\");\n\n_c = Display;\nexport default Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"sources":["/Users/rakuraku2563/Desktop/drawingWork/src/Chat/Container/Display/display.tsx"],"names":["React","useState","useEffect","db","CompDisplay","Display","messages","setMessages","id","unmounted","getMessage","messagesRef","collection","orderBy","limit","get","then","snapshot","newMessages","forEach","doc","push","data","reverse","timer","window","setTimeout","clearTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,EAAT,QAAmB,mBAAnB;AAIA,OAAOC,WAAP,MAAwB,iCAAxB;;;AAEA,MAAMC,OAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAwB,IAAxB,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,EAAJ;AACA,QAAIC,SAAS,GAAG,KAAhB;;AACA,UAAMC,UAAU,GAAG,YAAY;AAC7B,YAAMC,WAAW,GAAGR,EAAE,CAACS,UAAH,CAAc,UAAd,CAApB;AACA,YAAMD,WAAW,CACdE,OADG,CACK,WADL,EACkB,MADlB,EAEHC,KAFG,CAEG,EAFH,EAGHC,GAHG,GAIHC,IAJG,CAIGC,QAAD,IAAgD;AACpD,cAAMC,WAAkB,GAAG,EAA3B;AACAD,QAAAA,QAAQ,CAACE,OAAT,CAAkBC,GAAD,IAAS;AACxBF,UAAAA,WAAW,CAACG,IAAZ,CAAiB,EACf,GAAGD,GAAG,CAACE,IAAJ;AADY,WAAjB;AAGD,SAJD;AAKA,YAAI,CAACb,SAAL,EAAgBF,WAAW,CAACW,WAAW,CAACK,OAAZ,EAAD,CAAX;AACjB,OAZG,CAAN;AAaD,KAfD;;AAgBA,UAAMC,KAAK,GAAG,MAAM;AAClBd,MAAAA,UAAU;AACV,aAAOe,MAAM,CAACC,UAAP,CAAkB,MAAM;AAC7BlB,QAAAA,EAAE,GAAGgB,KAAK,EAAV;AACD,OAFM,EAEJ,IAFI,CAAP;AAGD,KALD;;AAMAhB,IAAAA,EAAE,GAAGgB,KAAK,EAAV;AACA,WAAO,MAAM;AACXf,MAAAA,SAAS,GAAG,IAAZ;AACAkB,MAAAA,YAAY,CAACnB,EAAD,CAAZ;AACD,KAHD;AAID,GA9BQ,EA8BN,CAACD,WAAD,CA9BM,CAAT;AAgCA,sBAAO,QAAC,WAAD;AAAa,IAAA,QAAQ,EAAED;AAAvB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CApCD;;GAAMD,O;;KAAAA,O;AAsCN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { db } from '../../../firebase';\nimport firebase from 'firebase';\nimport { Message } from '../../../Model/message';\n\nimport CompDisplay from '../../Component/Display/display';\n\nconst Display: React.FC = () => {\n  const [messages, setMessages] = useState<Array<Message> | null>(null);\n\n  useEffect(() => {\n    let id: number;\n    let unmounted = false;\n    const getMessage = async () => {\n      const messagesRef = db.collection('messages');\n      await messagesRef\n        .orderBy('createdAt', 'desc')\n        .limit(15)\n        .get()\n        .then((snapshot: firebase.firestore.QuerySnapshot) => {\n          const newMessages: any[] = [];\n          snapshot.forEach((doc) => {\n            newMessages.push({\n              ...doc.data()\n            });\n          });\n          if (!unmounted) setMessages(newMessages.reverse());\n        });\n    };\n    const timer = () => {\n      getMessage();\n      return window.setTimeout(() => {\n        id = timer();\n      }, 1000);\n    };\n    id = timer();\n    return () => {\n      unmounted = true;\n      clearTimeout(id);\n    };\n  }, [setMessages]);\n\n  return <CompDisplay messages={messages} />;\n};\n\nexport default Display;\n"]},"metadata":{},"sourceType":"module"}