{"ast":null,"code":"import firebase from 'firebase/app';\nimport { isEmpty } from 'lodash';\nimport { sprintf } from 'sprintf-js';\nimport { blankUser } from '../Model/user';\nimport { collectionName } from './constants';\n\nconst writeUser = async (db, firebaseUser, credential) => {\n  const id = firebaseUser.uid;\n  const {\n    displayName\n  } = firebaseUser;\n  const photoUrl = firebaseUser.photoURL;\n  let providerUid = '';\n  let screenName = '';\n  let description = '';\n\n  if (credential.additionalUserInfo) {\n    if (credential.additionalUserInfo.username) {\n      screenName = credential.additionalUserInfo.username;\n    }\n\n    if (credential.additionalUserInfo.profile) {\n      /* eslint-disable @typescript-eslint/no-explicit-any */\n      providerUid = credential.additionalUserInfo.profile.id_str;\n      description = credential.additionalUserInfo.profile.description || '';\n      /* eslint-enable */\n    }\n  }\n\n  if (!providerUid || !screenName) {\n    throw new Error('Invalid credential information.');\n  } // resolve screenname duplication\n\n\n  const query = await db.collection(collectionName.users).where('screenName', '==', screenName).get();\n\n  if (query.size) {\n    const rnd = Math.floor(Math.random() * 10000);\n    screenName = `${screenName}${sprintf('%04d', rnd)}`;\n  }\n\n  let theUser = null;\n  const batch = db.batch();\n  const userDoc = await db.collection(collectionName.users).doc(id).get();\n\n  if (userDoc.exists) {\n    const user = userDoc.data();\n    const diff = {};\n\n    if (user.description !== description) {\n      diff.description = description;\n    }\n\n    if (user.displayName !== displayName) {\n      diff.displayName = displayName;\n    }\n\n    if (user.photoUrl !== photoUrl) {\n      diff.photoUrl = photoUrl;\n    }\n\n    if (!isEmpty(diff)) {\n      batch.update(userDoc.ref, { ...diff,\n        updatedAt: firebase.firestore.FieldValue.serverTimestamp()\n      });\n    }\n\n    theUser = { ...diff,\n      ...user,\n      id: userDoc.id\n    };\n  } else {\n    const user = { ...blankUser,\n      providerUid,\n      screenName,\n      displayName,\n      description,\n      photoUrl\n    };\n    batch.set(userDoc.ref, { ...user,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      updatedAt: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    theUser = { ...user,\n      id: userDoc.id\n    };\n    const counterDoc = db.collection(collectionName.docCounters).doc(collectionName.users);\n    batch.set(counterDoc, {\n      count: firebase.firestore.FieldValue.increment(1),\n      updatedAt: firebase.firestore.FieldValue.serverTimestamp()\n    }, {\n      merge: true\n    });\n  }\n\n  await batch.commit();\n  return theUser;\n};\n\nexport default writeUser;","map":{"version":3,"sources":["/Users/rakuraku2563/Desktop/drawingWork/src/Functions/write-user.ts"],"names":["firebase","isEmpty","sprintf","blankUser","collectionName","writeUser","db","firebaseUser","credential","id","uid","displayName","photoUrl","photoURL","providerUid","screenName","description","additionalUserInfo","username","profile","id_str","Error","query","collection","users","where","get","size","rnd","Math","floor","random","theUser","batch","userDoc","doc","exists","user","data","diff","update","ref","updatedAt","firestore","FieldValue","serverTimestamp","set","createdAt","counterDoc","docCounters","count","increment","merge","commit"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport { isEmpty } from 'lodash';\nimport { sprintf } from 'sprintf-js';\n\nimport { User, blankUser } from '../Model/user';\nimport { collectionName } from './constants';\n\nconst writeUser = async (\n  db: firebase.firestore.Firestore,\n  firebaseUser: firebase.User,\n  credential: firebase.auth.UserCredential\n) => {\n  const id = firebaseUser.uid;\n  const { displayName } = firebaseUser;\n  const photoUrl = firebaseUser.photoURL;\n  let providerUid = '';\n  let screenName = '';\n  let description = '';\n\n  if (credential.additionalUserInfo) {\n    if (credential.additionalUserInfo.username) {\n      screenName = credential.additionalUserInfo.username;\n    }\n    if (credential.additionalUserInfo.profile) {\n      /* eslint-disable @typescript-eslint/no-explicit-any */\n      providerUid = (credential.additionalUserInfo.profile as any).id_str;\n      description = (credential.additionalUserInfo.profile as any).description || '';\n      /* eslint-enable */\n    }\n  }\n\n  if (!providerUid || !screenName) {\n    throw new Error('Invalid credential information.');\n  }\n\n  // resolve screenname duplication\n  const query = await db\n    .collection(collectionName.users)\n    .where('screenName', '==', screenName)\n    .get();\n  if (query.size) {\n    const rnd = Math.floor(Math.random() * 10000);\n    screenName = `${screenName}${sprintf('%04d', rnd)}`;\n  }\n\n  let theUser: User | null = null;\n  const batch = db.batch();\n  const userDoc = await db.collection(collectionName.users).doc(id).get();\n\n  if (userDoc.exists) {\n    const user = userDoc.data() as User;\n    const diff: Partial<User> = {};\n    if (user.description !== description) {\n      diff.description = description;\n    }\n    if (user.displayName !== displayName) {\n      diff.displayName = displayName;\n    }\n    if (user.photoUrl !== photoUrl) {\n      diff.photoUrl = photoUrl;\n    }\n    if (!isEmpty(diff)) {\n      batch.update(userDoc.ref, {\n        ...diff,\n        updatedAt: firebase.firestore.FieldValue.serverTimestamp()\n      });\n    }\n    theUser = { ...diff, ...user, id: userDoc.id };\n  } else {\n    const user: User = {\n      ...blankUser,\n      providerUid,\n      screenName,\n      displayName,\n      description,\n      photoUrl\n    };\n    batch.set(userDoc.ref, {\n      ...user,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      updatedAt: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    theUser = { ...user, id: userDoc.id };\n\n    const counterDoc = db\n      .collection(collectionName.docCounters)\n      .doc(collectionName.users);\n    batch.set(\n      counterDoc,\n      {\n        count: firebase.firestore.FieldValue.increment(1),\n        updatedAt: firebase.firestore.FieldValue.serverTimestamp()\n      },\n      { merge: true }\n    );\n  }\n  await batch.commit();\n\n  return theUser;\n};\n\nexport default writeUser;\n"]},"metadata":{},"sourceType":"module"}