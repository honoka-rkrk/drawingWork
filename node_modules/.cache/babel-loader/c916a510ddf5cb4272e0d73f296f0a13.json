{"ast":null,"code":"import _regeneratorRuntime from\"/Users/rakuraku2563/Desktop/drawingWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/rakuraku2563/Desktop/drawingWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/rakuraku2563/Desktop/drawingWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/rakuraku2563/Desktop/drawingWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{db}from'../../../firebase';import CompDisplay from'../../Component/Display/display';import{jsx as _jsx}from\"react/jsx-runtime\";var Display=function Display(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),messages=_useState2[0],setMessages=_useState2[1];useEffect(function(){var id;var unmounted=false;var getMessage=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var messagesRef;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:messagesRef=db.collection('messages');_context.next=3;return messagesRef.orderBy('createdAt','desc').limit(15).get().then(function(snapshot){var newMessages=[];snapshot.forEach(function(doc){newMessages.push(_objectSpread({},doc.data()));});if(!unmounted)setMessages(newMessages.reverse());});case 3:case\"end\":return _context.stop();}}},_callee);}));return function getMessage(){return _ref.apply(this,arguments);};}();var timer=function timer(){getMessage();return window.setTimeout(function(){id=timer();},1000);};id=timer();return function(){unmounted=true;clearTimeout(id);};},[setMessages]);return/*#__PURE__*/_jsx(CompDisplay,{messages:messages});};export default Display;","map":{"version":3,"sources":["/Users/rakuraku2563/Desktop/drawingWork/src/Chat/Container/Display/display.tsx"],"names":["React","useState","useEffect","db","CompDisplay","Display","messages","setMessages","id","unmounted","getMessage","messagesRef","collection","orderBy","limit","get","then","snapshot","newMessages","forEach","doc","push","data","reverse","timer","window","setTimeout","clearTimeout"],"mappings":"onBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,EAAT,KAAmB,mBAAnB,CAIA,MAAOC,CAAAA,WAAP,KAAwB,iCAAxB,C,2CAEA,GAAMC,CAAAA,OAAiB,CAAG,QAApBA,CAAAA,OAAoB,EAAM,CAC9B,cAAgCJ,QAAQ,CAAwB,IAAxB,CAAxC,wCAAOK,QAAP,eAAiBC,WAAjB,eAEAL,SAAS,CAAC,UAAM,CACd,GAAIM,CAAAA,EAAJ,CACA,GAAIC,CAAAA,SAAS,CAAG,KAAhB,CACA,GAAMC,CAAAA,UAAU,0FAAG,mJACXC,WADW,CACGR,EAAE,CAACS,UAAH,CAAc,UAAd,CADH,uBAEXD,CAAAA,WAAW,CACdE,OADG,CACK,WADL,CACkB,MADlB,EAEHC,KAFG,CAEG,EAFH,EAGHC,GAHG,GAIHC,IAJG,CAIE,SAACC,QAAD,CAAgD,CACpD,GAAMC,CAAAA,WAAkB,CAAG,EAA3B,CACAD,QAAQ,CAACE,OAAT,CAAiB,SAACC,GAAD,CAAS,CACxBF,WAAW,CAACG,IAAZ,kBACKD,GAAG,CAACE,IAAJ,EADL,GAGD,CAJD,EAKA,GAAI,CAACb,SAAL,CAAgBF,WAAW,CAACW,WAAW,CAACK,OAAZ,EAAD,CAAX,CACjB,CAZG,CAFW,uDAAH,kBAAVb,CAAAA,UAAU,0CAAhB,CAgBA,GAAMc,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAClBd,UAAU,GACV,MAAOe,CAAAA,MAAM,CAACC,UAAP,CAAkB,UAAM,CAC7BlB,EAAE,CAAGgB,KAAK,EAAV,CACD,CAFM,CAEJ,IAFI,CAAP,CAGD,CALD,CAMAhB,EAAE,CAAGgB,KAAK,EAAV,CACA,MAAO,WAAM,CACXf,SAAS,CAAG,IAAZ,CACAkB,YAAY,CAACnB,EAAD,CAAZ,CACD,CAHD,CAID,CA9BQ,CA8BN,CAACD,WAAD,CA9BM,CAAT,CAgCA,mBAAO,KAAC,WAAD,EAAa,QAAQ,CAAED,QAAvB,EAAP,CACD,CApCD,CAsCA,cAAeD,CAAAA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { db } from '../../../firebase';\nimport firebase from 'firebase';\nimport { Message } from '../../../Model/message';\n\nimport CompDisplay from '../../Component/Display/display';\n\nconst Display: React.FC = () => {\n  const [messages, setMessages] = useState<Array<Message> | null>(null);\n\n  useEffect(() => {\n    let id: number;\n    let unmounted = false;\n    const getMessage = async () => {\n      const messagesRef = db.collection('messages');\n      await messagesRef\n        .orderBy('createdAt', 'desc')\n        .limit(15)\n        .get()\n        .then((snapshot: firebase.firestore.QuerySnapshot) => {\n          const newMessages: any[] = [];\n          snapshot.forEach((doc) => {\n            newMessages.push({\n              ...doc.data()\n            });\n          });\n          if (!unmounted) setMessages(newMessages.reverse());\n        });\n    };\n    const timer = () => {\n      getMessage();\n      return window.setTimeout(() => {\n        id = timer();\n      }, 1000);\n    };\n    id = timer();\n    return () => {\n      unmounted = true;\n      clearTimeout(id);\n    };\n  }, [setMessages]);\n\n  return <CompDisplay messages={messages} />;\n};\n\nexport default Display;\n"]},"metadata":{},"sourceType":"module"}