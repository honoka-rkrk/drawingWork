{"ast":null,"code":"var _jsxFileName = \"/Users/rakuraku2563/Desktop/drawingWork/src/Home/Container/loginDialog.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { useHistory } from 'react-router';\nimport firebase from 'firebase/app';\nimport { FirebaseContext, UserContext } from '../../Context/contexts';\nimport CompLoginDialog from '../Component/loginDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginDialog = props => {\n  _s();\n\n  const {\n    open,\n    onClose\n  } = props;\n  const {\n    auth\n  } = useContext(FirebaseContext);\n  const {\n    setCredential\n  } = useContext(UserContext);\n  const history = useHistory(); //react-firebaseuiのパッケージを使用、signInOptionsでプロバイダを増やせばそれに対応してログインボタンも増える。\n\n  const uiConfig = {\n    signInFlow: 'redirect',\n    signInOptions: [{\n      provider: firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n      customParameters: {\n        lang: 'ja'\n      }\n    }],\n    callbacks: {\n      signInFailure: error => {\n        console.log(error);\n      },\n      // ログインが成功した時に呼ばれるコールバック関数。authResultにCredential情報を、\n      //redirectUrlにsignInSuccessUrlというURLﾊﾟﾗﾒｰﾀで設定されていたパスを渡されるようになっている。\n      signInSuccessWithAuthResult: (authResult, redirectUrl) => {\n        //twitterのスクリーンネームやプロフィール文が格納されたCredentialはここでしか取得できないので\n        //過ぎにContextに格納する\n        setCredential(authResult); //trueで返すとredirectUrlにリダイレクトされ、アプリがリロードされるので、その前にreact-routerでアプリ内\n        //リダイレクトを設定してfalseを返している。\n\n        const dest = redirectUrl || '/home';\n        history.replace(dest);\n        return false;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CompLoginDialog, {\n    uiConfig: uiConfig,\n    auth: auth,\n    open: open,\n    onClose: onClose\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginDialog, \"M3UOvM0NZTBhja49SR3JkHVprnQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = LoginDialog;\nexport default LoginDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginDialog\");","map":{"version":3,"sources":["/Users/rakuraku2563/Desktop/drawingWork/src/Home/Container/loginDialog.tsx"],"names":["React","useContext","useHistory","firebase","FirebaseContext","UserContext","CompLoginDialog","LoginDialog","props","open","onClose","auth","setCredential","history","uiConfig","signInFlow","signInOptions","provider","TwitterAuthProvider","PROVIDER_ID","customParameters","lang","callbacks","signInFailure","error","console","log","signInSuccessWithAuthResult","authResult","redirectUrl","dest","replace"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,wBAA7C;AACA,OAAOC,eAAP,MAA4B,0BAA5B;;;AAOA,MAAMC,WAAiC,GAAIC,KAAD,IAAuB;AAAA;;AAC/D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,KAA1B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAWV,UAAU,CAACG,eAAD,CAA3B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAoBX,UAAU,CAACI,WAAD,CAApC;AACA,QAAMQ,OAAO,GAAGX,UAAU,EAA1B,CAJ+D,CAM/D;;AACA,QAAMY,QAAgC,GAAG;AACvCC,IAAAA,UAAU,EAAE,UAD2B;AAEvCC,IAAAA,aAAa,EAAE,CACb;AACEC,MAAAA,QAAQ,EAAEd,QAAQ,CAACQ,IAAT,CAAcO,mBAAd,CAAkCC,WAD9C;AAEEC,MAAAA,gBAAgB,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAFpB,KADa,CAFwB;AAQvCC,IAAAA,SAAS,EAAE;AACTC,MAAAA,aAAa,EAAGC,KAAD,IAAW;AACxBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OAHQ;AAIT;AACA;AACAG,MAAAA,2BAA2B,EAAE,CAACC,UAAD,EAAaC,WAAb,KAA6B;AACxD;AACA;AACAjB,QAAAA,aAAa,CAACgB,UAAD,CAAb,CAHwD,CAIxD;AACA;;AACA,cAAME,IAAI,GAAGD,WAAW,IAAI,OAA5B;AACAhB,QAAAA,OAAO,CAACkB,OAAR,CAAgBD,IAAhB;AACA,eAAO,KAAP;AACD;AAfQ;AAR4B,GAAzC;AA0BA,sBACE,QAAC,eAAD;AAAiB,IAAA,QAAQ,EAAEhB,QAA3B;AAAqC,IAAA,IAAI,EAAEH,IAA3C;AAAiD,IAAA,IAAI,EAAEF,IAAvD;AAA6D,IAAA,OAAO,EAAEC;AAAtE;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CApCD;;GAAMH,W;UAIYL,U;;;KAJZK,W;AAsCN,eAAeA,WAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { useHistory } from 'react-router';\nimport firebase from 'firebase/app';\nimport { FirebaseContext, UserContext } from '../../Context/contexts';\nimport CompLoginDialog from '../Component/loginDialog';\n\ntype LoginProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nconst LoginDialog: React.FC<LoginProps> = (props: LoginProps) => {\n  const { open, onClose } = props;\n  const { auth } = useContext(FirebaseContext);\n  const { setCredential } = useContext(UserContext);\n  const history = useHistory();\n\n  //react-firebaseuiのパッケージを使用、signInOptionsでプロバイダを増やせばそれに対応してログインボタンも増える。\n  const uiConfig: firebaseui.auth.Config = {\n    signInFlow: 'redirect',\n    signInOptions: [\n      {\n        provider: firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n        customParameters: { lang: 'ja' }\n      }\n    ],\n    callbacks: {\n      signInFailure: (error) => {\n        console.log(error);\n      },\n      // ログインが成功した時に呼ばれるコールバック関数。authResultにCredential情報を、\n      //redirectUrlにsignInSuccessUrlというURLﾊﾟﾗﾒｰﾀで設定されていたパスを渡されるようになっている。\n      signInSuccessWithAuthResult: (authResult, redirectUrl) => {\n        //twitterのスクリーンネームやプロフィール文が格納されたCredentialはここでしか取得できないので\n        //過ぎにContextに格納する\n        setCredential(authResult as firebase.auth.UserCredential);\n        //trueで返すとredirectUrlにリダイレクトされ、アプリがリロードされるので、その前にreact-routerでアプリ内\n        //リダイレクトを設定してfalseを返している。\n        const dest = redirectUrl || '/home';\n        history.replace(dest);\n        return false;\n      }\n    }\n  };\n  return (\n    <CompLoginDialog uiConfig={uiConfig} auth={auth} open={open} onClose={onClose} />\n  );\n};\n\nexport default LoginDialog;\n"]},"metadata":{},"sourceType":"module"}