{"ast":null,"code":"import _regeneratorRuntime from\"/Users/rakuraku2563/Desktop/drawingWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/rakuraku2563/Desktop/drawingWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/rakuraku2563/Desktop/drawingWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/rakuraku2563/Desktop/drawingWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{db}from'../../firebase';import CompAllPicture from'../Component/allPicture';import{jsx as _jsx}from\"react/jsx-runtime\";var AllPicture=function AllPicture(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),images=_useState2[0],setImages=_useState2[1];var _useState3=useState(2),_useState4=_slicedToArray(_useState3,2),favNum=_useState4[0],setFavNum=_useState4[1];useEffect(function(){var unmounted=false;var getImages=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var imagesRef;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:imagesRef=db.collection('images');_context.next=3;return imagesRef.orderBy('createdAt').get().then(function(snapshot){var newImages=[];snapshot.forEach(function(doc){newImages.push(_objectSpread({id:doc.id},doc.data()));});if(!unmounted)setImages(newImages);});case 3:case\"end\":return _context.stop();}}},_callee);}));return function getImages(){return _ref.apply(this,arguments);};}();getImages();return function(){unmounted=true;};},[]);return/*#__PURE__*/_jsx(CompAllPicture,{images:images,favNum:favNum,setFavNum:setFavNum});};export default AllPicture;","map":{"version":3,"sources":["/Users/rakuraku2563/Desktop/drawingWork/src/DispPicture/Container/allPicture.tsx"],"names":["React","useState","useEffect","db","CompAllPicture","AllPicture","images","setImages","favNum","setFavNum","unmounted","getImages","imagesRef","collection","orderBy","get","then","snapshot","newImages","forEach","doc","push","id","data"],"mappings":"onBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAAmBC,EAAnB,KAA6B,gBAA7B,CAGA,MAAOC,CAAAA,cAAP,KAA2B,yBAA3B,C,2CAEA,GAAMC,CAAAA,UAAoB,CAAG,QAAvBA,CAAAA,UAAuB,EAAM,CACjC,cAA4BJ,QAAQ,CAAsB,IAAtB,CAApC,wCAAOK,MAAP,eAAeC,SAAf,eACA,eAA4BN,QAAQ,CAAS,CAAT,CAApC,yCAAOO,MAAP,eAAeC,SAAf,eAEAP,SAAS,CAAC,UAAM,CACd,GAAIQ,CAAAA,SAAS,CAAG,KAAhB,CACA,GAAMC,CAAAA,SAAS,0FAAG,iJACVC,SADU,CACET,EAAE,CAACU,UAAH,CAAc,QAAd,CADF,uBAEVD,CAAAA,SAAS,CACZE,OADG,CACK,WADL,EAEHC,GAFG,GAGHC,IAHG,CAGE,SAACC,QAAD,CAAgD,CACpD,GAAMC,CAAAA,SAAgB,CAAG,EAAzB,CACAD,QAAQ,CAACE,OAAT,CAAiB,SAACC,GAAD,CAAS,CACxBF,SAAS,CAACG,IAAV,gBACEC,EAAE,CAAEF,GAAG,CAACE,EADV,EAEKF,GAAG,CAACG,IAAJ,EAFL,GAID,CALD,EAMA,GAAI,CAACb,SAAL,CAAgBH,SAAS,CAACW,SAAD,CAAT,CACjB,CAZG,CAFU,uDAAH,kBAATP,CAAAA,SAAS,0CAAf,CAgBAA,SAAS,GACT,MAAO,WAAM,CACXD,SAAS,CAAG,IAAZ,CACD,CAFD,CAGD,CAtBQ,CAsBN,EAtBM,CAAT,CAwBA,mBAAO,KAAC,cAAD,EAAgB,MAAM,CAAEJ,MAAxB,CAAgC,MAAM,CAAEE,MAAxC,CAAgD,SAAS,CAAEC,SAA3D,EAAP,CACD,CA7BD,CA+BA,cAAeJ,CAAAA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport firebase, { db } from '../../firebase';\nimport { Image } from '../../Model/image';\n\nimport CompAllPicture from '../Component/allPicture';\n\nconst AllPicture: React.FC = () => {\n  const [images, setImages] = useState<Array<Image> | null>(null);\n  const [favNum, setFavNum] = useState<number>(2);\n\n  useEffect(() => {\n    let unmounted = false;\n    const getImages = async () => {\n      const imagesRef = db.collection('images');\n      await imagesRef\n        .orderBy('createdAt')\n        .get()\n        .then((snapshot: firebase.firestore.QuerySnapshot) => {\n          const newImages: any[] = [];\n          snapshot.forEach((doc) => {\n            newImages.push({\n              id: doc.id,\n              ...doc.data()\n            });\n          });\n          if (!unmounted) setImages(newImages);\n        });\n    };\n    getImages();\n    return () => {\n      unmounted = true;\n    };\n  }, []);\n\n  return <CompAllPicture images={images} favNum={favNum} setFavNum={setFavNum} />;\n};\n\nexport default AllPicture;\n"]},"metadata":{},"sourceType":"module"}