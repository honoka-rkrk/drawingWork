{"ast":null,"code":"var _jsxFileName = \"/Users/rakuraku2563/Desktop/drawingWork/src/Upload/Container/uploadCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useContext } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport firebase, { storage, db } from '../../firebase';\nimport CompUploadCard from '../Component/uploadCard';\nimport { UserContext } from '../../Context/contexts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UploadCard = props => {\n  _s();\n\n  const {\n    setIsUpd\n  } = props;\n  const [myFiles, setMyFiles] = useState([]);\n  const [clickable, setClickable] = useState(false);\n  const [src, setSrc] = useState('');\n  const [title, setTitle] = useState('無題');\n  const {\n    user\n  } = useContext(UserContext);\n  const [header, setHeader] = useState('画像をアップロードしてください');\n  const [subHeader, setSubHeader] = useState('ファイルの種類は「Jpeg」「Jpg」「Png」にしてください。'); //タイトルが変更されたとき\n\n  const handleTitleChange = e => {\n    setTitle(e.target.value);\n  };\n\n  const onDrop = useCallback(async acceptedFiles => {\n    if (!acceptedFiles[0]) return;\n\n    try {\n      setMyFiles([...acceptedFiles]);\n      setClickable(true);\n      handlePreview(acceptedFiles);\n    } catch (error) {\n      alert(error);\n    }\n  }, []);\n\n  const onDropRejected = () => {\n    alert('画像のみ受け付けることができます。');\n  };\n\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    onDropRejected\n  });\n\n  const handleUpload = async accepterdImg => {\n    try {\n      //アップロード処理\n      const storageRef = storage.ref(`/images/${myFiles[0].name}`);\n      const uploadTask = storageRef.put(myFiles[0]);\n      uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, next, error);\n    } catch (error) {\n      console.log('エラーキャッチ', error);\n    }\n  };\n\n  const postUrl = async () => {\n    const url = await storage.ref(`/images/${myFiles[0].name}`).getDownloadURL();\n\n    if (url !== '' && user) {\n      db.collection('images').doc().set({\n        title: title,\n        imageUrl: url,\n        screenName: user.screenName,\n        displayName: user.displayName,\n        iconUrl: user.photoUrl,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp()\n      });\n    }\n  };\n\n  const next = snapshot => {\n    //進行中のsnapshotを得る\n    //アップロードの進行度を表示\n    const percent = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n    console.log(percent + '% done');\n    console.log(snapshot);\n\n    if (percent === 100) {\n      postUrl();\n      setClickable(false);\n      setIsUpd(true);\n      setHeader('画像がアップロードできました！');\n      setSubHeader('制限時間が終わると自動的に閲覧画面に移動します。制限時間が終わるまで今しばらくお待ちください。');\n    }\n  };\n\n  const error = error => {\n    alert(error);\n  };\n\n  const handlePreview = files => {\n    if (files === null) {\n      return;\n    }\n\n    const file = files[0];\n\n    if (file === null) {\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => {\n      setSrc(reader.result);\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(CompUploadCard, {\n    getRootProps: getRootProps,\n    getInputProps: getInputProps,\n    myFiles: myFiles,\n    src: src,\n    clickable: clickable,\n    handleUpload: handleUpload,\n    title: title,\n    handleTitleChange: handleTitleChange,\n    header: header,\n    subHeader: subHeader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UploadCard, \"eKOLiQO4tM3l7vxX0EImm9uDxPo=\", false, function () {\n  return [useDropzone];\n});\n\n_c = UploadCard;\nexport default UploadCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadCard\");","map":{"version":3,"sources":["/Users/rakuraku2563/Desktop/drawingWork/src/Upload/Container/uploadCard.tsx"],"names":["React","useState","useCallback","useContext","useDropzone","firebase","storage","db","CompUploadCard","UserContext","UploadCard","props","setIsUpd","myFiles","setMyFiles","clickable","setClickable","src","setSrc","title","setTitle","user","header","setHeader","subHeader","setSubHeader","handleTitleChange","e","target","value","onDrop","acceptedFiles","handlePreview","error","alert","onDropRejected","getRootProps","getInputProps","handleUpload","accepterdImg","storageRef","ref","name","uploadTask","put","on","TaskEvent","STATE_CHANGED","next","console","log","postUrl","url","getDownloadURL","collection","doc","set","imageUrl","screenName","displayName","iconUrl","photoUrl","createdAt","firestore","FieldValue","serverTimestamp","snapshot","percent","bytesTransferred","totalBytes","files","file","reader","FileReader","readAsDataURL","onload","result"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useContext } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport firebase, { storage, db } from '../../firebase';\nimport CompUploadCard from '../Component/uploadCard';\nimport { UserContext } from '../../Context/contexts';\n\ntype UploadCardProps = {\n  setIsUpd: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst UploadCard: React.FC<UploadCardProps> = (props: UploadCardProps) => {\n  const { setIsUpd } = props;\n  const [myFiles, setMyFiles] = useState<File[]>([]);\n  const [clickable, setClickable] = useState(false);\n  const [src, setSrc] = useState('');\n  const [title, setTitle] = useState<string>('無題');\n  const { user } = useContext(UserContext);\n  const [header, setHeader] = useState<string>('画像をアップロードしてください');\n  const [subHeader, setSubHeader] = useState<string>(\n    'ファイルの種類は「Jpeg」「Jpg」「Png」にしてください。'\n  );\n  //タイトルが変更されたとき\n  const handleTitleChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setTitle(e.target.value);\n  };\n\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    if (!acceptedFiles[0]) return;\n\n    try {\n      setMyFiles([...acceptedFiles]);\n      setClickable(true);\n      handlePreview(acceptedFiles);\n    } catch (error) {\n      alert(error);\n    }\n  }, []);\n\n  const onDropRejected = () => {\n    alert('画像のみ受け付けることができます。');\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    onDropRejected\n  });\n\n  const handleUpload = async (accepterdImg: any) => {\n    try {\n      //アップロード処理\n      const storageRef = storage.ref(`/images/${myFiles[0].name}`);\n      const uploadTask: any = storageRef.put(myFiles[0]);\n\n      uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, next, error);\n    } catch (error) {\n      console.log('エラーキャッチ', error);\n    }\n  };\n\n  const postUrl = async () => {\n    const url = await storage.ref(`/images/${myFiles[0].name}`).getDownloadURL();\n    if (url !== '' && user) {\n      db.collection('images').doc().set({\n        title: title,\n        imageUrl: url,\n        screenName: user.screenName,\n        displayName: user.displayName,\n        iconUrl: user.photoUrl,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp()\n      });\n    }\n  };\n\n  const next = (snapshot: { bytesTransferred: number; totalBytes: number }) => {\n    //進行中のsnapshotを得る\n    //アップロードの進行度を表示\n    const percent = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    console.log(percent + '% done');\n    console.log(snapshot);\n    if (percent === 100) {\n      postUrl();\n      setClickable(false);\n      setIsUpd(true);\n      setHeader('画像がアップロードできました！');\n      setSubHeader(\n        '制限時間が終わると自動的に閲覧画面に移動します。制限時間が終わるまで今しばらくお待ちください。'\n      );\n    }\n  };\n\n  const error = (error: any) => {\n    alert(error);\n  };\n\n  const handlePreview = (files: any) => {\n    if (files === null) {\n      return;\n    }\n    const file = files[0];\n    if (file === null) {\n      return;\n    }\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      setSrc(reader.result as string);\n    };\n  };\n\n  return (\n    <CompUploadCard\n      getRootProps={getRootProps}\n      getInputProps={getInputProps}\n      myFiles={myFiles}\n      src={src}\n      clickable={clickable}\n      handleUpload={handleUpload}\n      title={title}\n      handleTitleChange={handleTitleChange}\n      header={header}\n      subHeader={subHeader}\n    />\n  );\n};\n\nexport default UploadCard;\n"]},"metadata":{},"sourceType":"module"}